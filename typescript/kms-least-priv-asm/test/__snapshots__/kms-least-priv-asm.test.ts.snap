// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`KMS key and ASM Test 1`] = `
{
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "App1Secret46548AA8": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "GenerateSecretString": {
          "ExcludeCharacters": ""@/\\",
          "GenerateStringKey": "password",
          "PasswordLength": 22,
          "SecretStringTemplate": "{"database":"testDatabase","username":"testAppUser"}",
        },
        "KmsKeyId": {
          "Fn::GetAtt": [
            "SecretsManagerKMSBF4037C3",
            "Arn",
          ],
        },
        "Name": "secret/for/lambdaMyTestStack",
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "LambdaExecutionRoleD5C26073": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LambdaExecutionRoleDefaultPolicy6D69732F": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "App1Secret46548AA8",
              },
            },
            {
              "Action": [
                "ssm:DescribeParameters",
                "ssm:GetParameters",
                "ssm:GetParameter",
                "ssm:GetParameterHistory",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter",
                    {
                      "Ref": "StringParameter472EED0E",
                    },
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LambdaExecutionRoleDefaultPolicy6D69732F",
        "Roles": [
          {
            "Ref": "LambdaExecutionRoleD5C26073",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "SecretsManagerKMSAlias75005233": {
      "Properties": {
        "AliasName": "alias/kms/app1/secretsmanagerMyTestStack",
        "TargetKeyId": {
          "Fn::GetAtt": [
            "SecretsManagerKMSBF4037C3",
            "Arn",
          ],
        },
      },
      "Type": "AWS::KMS::Alias",
    },
    "SecretsManagerKMSBF4037C3": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "KMS to manage App1 keys in Secrets Manager",
        "KeyPolicy": {
          "Statement": [
            {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
            {
              "Action": [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt*",
                "kms:CreateGrant",
                "kms:DescribeKey",
              ],
              "Condition": {
                "StringEquals": {
                  "kms:CallerAccount": {
                    "Ref": "AWS::AccountId",
                  },
                  "kms:ViaService": {
                    "Fn::Join": [
                      "",
                      [
                        "secretsmanager.",
                        {
                          "Ref": "AWS::Region",
                        },
                        ".amazonaws.com",
                      ],
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "AWS": "*",
              },
              "Resource": "*",
            },
            {
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Condition": {
                "StringEquals": {
                  "kms:ViaService": {
                    "Fn::Join": [
                      "",
                      [
                        "secretsmanager.",
                        {
                          "Ref": "AWS::Region",
                        },
                        ".amazonaws.com",
                      ],
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
            {
              "Action": [
                "kms:CreateGrant",
                "kms:DescribeKey",
              ],
              "Condition": {
                "StringEquals": {
                  "kms:ViaService": {
                    "Fn::Join": [
                      "",
                      [
                        "secretsmanager.",
                        {
                          "Ref": "AWS::Region",
                        },
                        ".amazonaws.com",
                      ],
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
            {
              "Action": "kms:Decrypt",
              "Condition": {
                "StringEquals": {
                  "kms:ViaService": {
                    "Fn::Join": [
                      "",
                      [
                        "secretsmanager.",
                        {
                          "Ref": "AWS::Region",
                        },
                        ".amazonaws.com",
                      ],
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "LambdaExecutionRoleD5C26073",
                    "Arn",
                  ],
                },
              },
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::KMS::Key",
      "UpdateReplacePolicy": "Retain",
    },
    "StringParameter472EED0E": {
      "Properties": {
        "Description": "Some user-friendly description for App1 secrets",
        "Name": "/path/to/asm/secrets/app1MyTestStack",
        "Type": "String",
        "Value": {
          "Ref": "App1Secret46548AA8",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "asmFetchLambda3716BFBE": {
      "DependsOn": [
        "LambdaExecutionRoleDefaultPolicy6D69732F",
        "LambdaExecutionRoleD5C26073",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "import logging
import boto3
import base64
from botocore.exceptions import ClientError
import os

logger = logging.getLogger(__name__)


def lambda_handler(event, context):

     
    ssm = boto3.client('ssm')
    parameterName = os.environ['SSMParaName']
    parameterValue = ssm.get_parameter(Name=parameterName)
    
    result = get_secret(parameterValue['Parameter']['Value'])
    return result
        
def get_secret(secretId):

    session = boto3.session.Session()
    client = session.client('secretsmanager')

    # In this sample we only handle the specific exceptions for the 'GetSecretValue' API.
    # See https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_GetSecretValue.html
    # We rethrow the exception by default.

    try:
        get_secret_value_response = client.get_secret_value(
            SecretId=secretId
        )
    except ClientError as e:
        logger.error(e)
        if e.response['Error']['Code'] == 'DecryptionFailureException':
            # Secrets Manager can't decrypt the protected secret text using the provided KMS key.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'InternalServiceErrorException':
            # An error occurred on the server side.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'InvalidParameterException':
            # You provided an invalid value for a parameter.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'InvalidRequestException':
            # You provided a parameter value that is not valid for the current state of the resource.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'ResourceNotFoundException':
            # We can't find the resource that you asked for.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
    else:
        # Decrypts secret using the associated KMS CMK.
        # Depending on whether the secret is a string or binary, one of these fields will be populated.
        if 'SecretString' in get_secret_value_response:
            return get_secret_value_response['SecretString']
        else:
            return base64.b64decode(get_secret_value_response['SecretBinary'])
",
        },
        "Description": "Sample lambda to check if an IAM role can fetch ASM secret",
        "Environment": {
          "Variables": {
            "SSMParaName": {
              "Ref": "StringParameter472EED0E",
            },
          },
        },
        "FunctionName": "asmFetchLambdaMyTestStack",
        "Handler": "index.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRoleD5C26073",
            "Arn",
          ],
        },
        "Runtime": "python3.9",
      },
      "Type": "AWS::Lambda::Function",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
